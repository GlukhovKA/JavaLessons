import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class Main extends JFrame {

    public static void main(String[] args) throws IOException {
        new Main();
    }

    private JPanel jp1, jp2;


    Main() throws IOException {
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(600,600);
        setResizable(false);
        setVisible(true);
        setTitle("hey");
        setLocationRelativeTo(null);
        //setLayout(null);

        //validate();

        jp1 = new Panel(new File("image.png"));
        jp1.setBounds(0,0,220,220);
        add(jp1);

        jp2 = new Panel(new File("img.png"));
        jp2.setBounds(400,400,160,160);
        add(jp2);

        jp1.repaint();
        jp2.repaint();

        addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if(e.getKeyChar() == 'w'){
                    jp1.setLocation(jp1.getX(),jp1.getY() - 5);
                } else if(e.getKeyChar() == 's'){
                    jp1.setLocation(jp1.getX(),jp1.getY() + 5);
                } else if(e.getKeyChar() == 'a'){
                    jp1.setLocation(jp1.getX() - 5,jp1.getY());
                } else if(e.getKeyChar() == 'd'){
                    jp1.setLocation(jp1.getX() + 5,jp1.getY());
                }
            }

            boolean w,a,s,d;
            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode() == 38){
                    w = true;
                    if(a) jp1.setLocation(jp1.getX() - 5,jp1.getY() - 5);
                    else if(d) jp1.setLocation(jp1.getX() + 5,jp1.getY() - 5);
                    else jp1.setLocation(jp1.getX(),jp1.getY() - 5);
                }
                if(e.getKeyCode() == 40){
                    s = true;
                    if(a) jp1.setLocation(jp1.getX() - 5,jp1.getY() + 5);
                    else if(d) jp1.setLocation(jp1.getX() + 5,jp1.getY() + 5);
                    jp1.setLocation(jp1.getX(),jp1.getY() + 5);
                }
                if(e.getKeyCode() == 37){
                    a = true;
                    if(w)jp1.setLocation(jp1.getX() - 5,jp1.getY() - 5);
                    else if(s) jp1.setLocation(jp1.getX() - 5,jp1.getY() + 5);
                    else jp1.setLocation(jp1.getX() - 5,jp1.getY());
                }
                if(e.getKeyCode() == 39) {
                    d = true;
                    if(w) jp1.setLocation(jp1.getX() + 5,jp1.getY() - 5);
                    else if(s) jp1.setLocation(jp1.getX() + 5,jp1.getY() + 5);
                    else jp1.setLocation(jp1.getX() + 5, jp1.getY());
                }

            }

            @Override
            public void keyReleased(KeyEvent e) {
                w=a=s=d=false;
            }
        });

        addMouseListener(new MouseAdapter() {
            int x, y;
            boolean z1, z2;
            @Override
            public void mousePressed(MouseEvent e) {
                if(e.getX() >= jp1.getX() && e.getX() <= jp1.getX() + jp1.getWidth() && e.getY() >= jp1.getY() && e.getY() <= jp1.getY() + jp1.getHeight()){
                    x = e.getX() - jp1.getX();
                    y = e.getY() - jp1.getY();
                    z1 = true;
                }
                else z1 = false;
                if(e.getX() >= jp2.getX() && e.getX() <= jp2.getX() + jp2.getWidth() && e.getY() >= jp2.getY() && e.getY() <= jp2.getY() + jp2.getHeight()){
                    x = e.getX() - jp2.getX();
                    y = e.getY() - jp2.getY();
                    z2 = true;
                }
                else z2 = false;

            }
            @Override
            public void mouseReleased(MouseEvent e){
                if(z1) jp1.setLocation(e.getX() - x, e.getY() - y);
                if(z2) jp2.setLocation(e.getX() - x, e.getY() - y);

//                if(jp1.getX())
            }
        });
    }

    public class Panel extends JPanel {
        private BufferedImage bi;
        Panel(File file) throws IOException {
            bi = ImageIO.read(file);
        }
        @Override
        public void paint(Graphics g){
            super.paint(g);
            g.drawImage(bi,0,0,this);
        }
    }
}
